//Write  a  program  which  has  three  thread.  Each  having  different  value  of  priority:  Thread  A  (minimum), 
//Thread  B  (normal),  and  Thread  c  (maximum).    Don't  rely  on  thread  priorities  when  designing  your 
//multithreaded  application.    Because thread-scheduling  priority  behavior  is  not  guaranteed,  use  thread 
//priorities as a way to improve the efficiency of your code



import java.lang.*;
 
class ThreadDemo extends Thread
{
    public void run()
    {
        System.out.println("Inside run method");
    }
 
    public static void main(String[]args)
    {
        ThreadDemo tA = new ThreadDemo();
        ThreadDemo tB = new ThreadDemo();
        ThreadDemo tC = new ThreadDemo();
 
        System.out.println("tA thread priority : " +
                              tA.getPriority()); // Default 5
        System.out.println("tB thread priority : " +
                              tB.getPriority()); // Default 5
        System.out.println("tC thread priority : " +
                              tC.getPriority()); // Default 5
 
        tA.setPriority(2);
        tB.setPriority(5);
        tC.setPriority(8);
 
        // tC.setPriority(21); will throw IllegalArgumentException
        System.out.println("tA thread priority : " +
                              tA.getPriority());  //2
        System.out.println("tB thread priority : " +
                              tB.getPriority()); //5
        System.out.println("tC thread priority : " +
                              tC.getPriority());//8
 
        // Main thread
        System.out.print(Thread.currentThread().getName());
        System.out.println("Main thread priority : "
                       + Thread.currentThread().getPriority());
 
        // Main thread priority is set to 10
        Thread.currentThread().setPriority(10);
        System.out.println("Main thread priority : "
                       + Thread.currentThread().getPriority());
    }
}
